[{"/Users/homebase/Desktop/HIST3907/dreadful-visitation-site/src/index.js":"1","/Users/homebase/Desktop/HIST3907/dreadful-visitation-site/src/App.js":"2","/Users/homebase/Desktop/HIST3907/dreadful-visitation-site/src/reportWebVitals.js":"3","/Users/homebase/Desktop/HIST3907/dreadful-visitation-site/src/components/StreamChart.js":"4","/Users/homebase/Desktop/HIST3907/dreadful-visitation-site/src/components/PlagueMap.js":"5","/Users/homebase/Desktop/HIST3907/dreadful-visitation-site/src/components/BurialMap.js":"6","/Users/homebase/Desktop/HIST3907/dreadful-visitation-site/src/components/BarChart.js":"7","/Users/homebase/Desktop/HIST3907/dreadful-visitation-site/src/components/fadeinSec.js":"8"},{"size":500,"mtime":1619556567674,"results":"9","hashOfConfig":"10"},{"size":27327,"mtime":1619669008888,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1619488256232,"results":"12","hashOfConfig":"10"},{"size":4234,"mtime":1619663079723,"results":"13","hashOfConfig":"10"},{"size":7131,"mtime":1619665854819,"results":"14","hashOfConfig":"10"},{"size":7031,"mtime":1619637765165,"results":"15","hashOfConfig":"10"},{"size":5349,"mtime":1619664733185,"results":"16","hashOfConfig":"10"},{"size":641,"mtime":1619637806927,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hmhpvu",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},"/Users/homebase/Desktop/HIST3907/dreadful-visitation-site/src/index.js",[],"/Users/homebase/Desktop/HIST3907/dreadful-visitation-site/src/App.js",[],"/Users/homebase/Desktop/HIST3907/dreadful-visitation-site/src/reportWebVitals.js",[],"/Users/homebase/Desktop/HIST3907/dreadful-visitation-site/src/components/StreamChart.js",[],"/Users/homebase/Desktop/HIST3907/dreadful-visitation-site/src/components/PlagueMap.js",["38","39"],"import React from 'react';\nimport * as d3 from 'd3';\nimport '../css/maps.css'\nimport { selection } from 'd3';\n\nlet secretWeekSelector = 1;\n\nclass PlagueMap extends React.Component {\n    componentDidMount() {\n        this.drawChart();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.selector !== this.props.selector) {\n            console.log('b: ' + this.props.selector)\n\n            this.updateChart();\n        }\n    }\n\n    updateChart() {\n        secretWeekSelector = this.props.selector;\n        console.log('t:' + this.props.selector)\n\n        let svg = this.svg;\n        let g = svg.select('g');\n        console.log(g.size());\n        let mapLayer = g.select('g.map-layer');\n        console.log(mapLayer.size());\n\n        let color = d3.scaleThreshold()\n        .domain([1, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 700])\n        .range([\"#efe6b4\",\"#f6d27f\",\"#fdc14a\",\"#fb9d22\",\"#f57e00\",'#ec720f',\"#ea5110\",\"#e22828\",'#bd251d',\"#ab212a\",'#88202a',\"#762334\",\"#4e1824\"]);\n\n        // get weekly count\n        function pCount(d){\n            let week = 'week' + secretWeekSelector;\n            console.log('WeekCount:' + week)\n            return d.properties[week];\n        }\n\n        // Get province color\n        function fillFn(d){\n            let c = pCount(d);\n            return color(c);\n        }\n\n        let all = mapLayer.selectAll('path');\n        console.log(all.size());\n        all.style('fill', function(d){return fillFn(d);});\n    }\n\n    drawChart() {\n        let width = this.props.width,\n        height = this.props.height,\n        centered;\n\n        secretWeekSelector = this.props.selector;\n        console.log('t:' + this.props.selector)\n\n        // Define color scale\n        let color = d3.scaleThreshold()\n        .domain([1, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 700])\n        .range([\"#efe6b4\",\"#f6d27f\",\"#fdc14a\",\"#fb9d22\",\"#f57e00\",'#ec720f',\"#ea5110\",\"#e22828\",'#bd251d',\"#ab212a\",'#88202a',\"#762334\",\"#4e1824\"]);\n\n        let projection = d3.geoMercator()\n            .scale(200000)\n            // Center the Map in London\n            .center([-0.08629450633040443, 51.5231191276096])\n            .translate([width / 2, height / 2]);\n\n        let path = d3.geoPath()\n            .projection(projection);\n\n        // Set svg width & height\n        let svg = this.svg\n            .attr('width', width)\n            .attr('height', height);\n\n        // Add background\n        svg.append('rect')\n        .attr('class', 'background')\n        .attr('width', width)\n        .attr('height', height)\n        .on('click', clicked);\n\n        let g = svg.append('g');\n\n        let effectLayer = g.append('g')\n        .classed('effect-layer', true);\n\n        let mapLayer = g.append('g')\n        .classed('map-layer', true);\n\n        let chartLayer = g.append('g')\n            .classed('chart-layer', true)\n\n        let bigText = g.append('text')\n        .classed('big-text', true)\n        .attr('x', 20)\n        .attr('y', 45);\n\n        let countText = g.append('text')\n        .classed('count-text', true)\n        .attr('x', 23)\n        .attr('y', 70);\n\n        // Load map data\n        d3.json(this.props.data, function(error, mapData) {\n            let features = mapData.features;\n        // Draw each parish as a path\n            mapLayer.selectAll('path')\n                .data(features)\n                .enter().append('path')\n                .attr('d', path)\n                .attr('vector-effect', 'non-scaling-stroke')\n                .style('fill', fillFn)\n                .on('mouseover', mouseover)\n                .on('mouseout', mouseout)\n                .on('click', clicked);\n            });\n\n        // Get parish name\n        function nameFn(d){\n            return d && d.properties ? d.properties.parish : null;\n        }\n\n        // get weekly count\n        function pCount(d){\n            let week = 'week' + secretWeekSelector;\n            console.log('WeekCount:' + week)\n            return d.properties[week];\n        }\n\n        // Get province color\n        function fillFn(d){\n            let c = pCount(d);\n            return color(c);\n        }\n\n        // When clicked, zoom in\n        function clicked(d) {\n        let x, y, k;\n\n        // Compute centroid of the selected path\n        if (d && centered !== d) {\n            let centroid = path.centroid(d);\n            x = centroid[0];\n            y = centroid[1];\n            k = 4;\n            centered = d;\n        } else {\n            x = width / 2;\n            y = height / 2;\n            k = 1;\n            centered = null;\n        }\n\n        // Highlight the clicked parish\n        mapLayer.selectAll('path')\n            .style('fill', function(d){return centered && d===centered ? '#D5708B' : fillFn(d);});\n\n        // Zoom\n        g.transition()\n            .duration(750)\n            .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')scale(' + k + ')translate(' + -x + ',' + -y + ')');\n        }\n\n        // --------------- MOUSE EVENTS ---------------\n\n        function mouseover(d){\n        // Highlight hovered parish\n        d3.select(this).style('fill', 'orange');\n\n        // Draw effects\n        textArt(nameFn(d));\n        disCount(pCount(d));\n        }\n\n        function mouseout(d){\n        // Reset province color\n        mapLayer.selectAll('path')\n            .style('fill', function(d){return centered && d===centered ? '#D5708B' : fillFn(d);});\n\n        // Remove effect text\n        effectLayer.selectAll('text').transition()\n            .style('opacity', 0)\n            .remove();\n\n        // Clear province name\n        bigText.text('');\n        countText.text('')\n        }\n\n        // ---------------- TEXT STYLING -----------------\n\n        let BASE_FONT = \"'Helvetica Neue', Helvetica, Arial, sans-serif\";\n\n        let FONTS = [\n            \"Open Sans\",\n            \"Josefin Slab\",\n            \"Arvo\",\n            \"Lato\",\n            \"Vollkorn\",\n            \"Abril Fatface\",\n            \"Old StandardTT\",\n            \"Droid+Sans\",\n            \"Lobster\",\n            \"Inconsolata\",\n            \"Montserrat\",\n            \"Playfair Display\",\n            \"Karla\",\n            \"Alegreya\",\n            \"Libre Baskerville\",\n            \"Merriweather\",\n            \"Lora\",\n            \"Archivo Narrow\",\n            \"Neuton\",\n            \"Signika\",\n            \"Questrial\",\n            \"Fjalla One\",\n            \"Bitter\",\n            \"letela Round\"\n        ];\n\n        function textArt(text){\n        // Use random font\n        let fontIndex = Math.round(Math.random() * FONTS.length);\n        let fontFamily = FONTS[fontIndex] + ', ' + BASE_FONT;\n\n        bigText\n            .style('font-family', fontFamily)\n            .text(text);\n        }\n\n        function disCount(count){\n        let fontFamily = BASE_FONT;\n        countText\n            .style('font-family', fontFamily)\n            .text(\"# of plague burials: \" + count);\n\n        }\n    }\n\n    render(){\n        return <svg width={this.props.width} height={this.props.height}\n            ref={handle => {this.svg = d3.select(handle)}}></svg>\n    }\n\n}\n\nexport default PlagueMap;","/Users/homebase/Desktop/HIST3907/dreadful-visitation-site/src/components/BurialMap.js",["40","41"],"import React from 'react';\nimport * as d3 from 'd3';\nimport '../css/maps.css'\nimport { selection } from 'd3';\n\nlet secretWeekSelector = 1;\n\nclass BurialMap extends React.Component {\n    componentDidMount() {\n        this.drawChart();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.selector !== this.props.selector) {\n            console.log('b: ' + this.props.selector)\n\n            this.updateChart();\n        }\n    }\n\n    updateChart() {\n        secretWeekSelector = this.props.selector;\n        console.log('t:' + this.props.selector)\n\n        let svg = this.svg;\n        let g = svg.select('g');\n        //console.log(g.size());\n        let mapLayer = g.select('g.map-layer');\n        console.log(mapLayer.size());\n\n        let color = d3.scaleThreshold()\n        .domain([1, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 700])\n        .range([\"#efe6b4\",\"#f6d27f\",\"#fdc14a\",\"#fb9d22\",\"#f57e00\",'#ec720f',\"#ea5110\",\"#e22828\",'#bd251d',\"#ab212a\",'#88202a',\"#762334\",\"#4e1824\"]);\n\n        // get weekly count\n        function pCount(d){\n            let week = 'week' + secretWeekSelector;\n            console.log('WeekCount:' + week)\n            return d.properties[week];\n        }\n\n        // Get province color\n        function fillFn(d){\n            let c = pCount(d);\n            return color(c);\n        }\n\n        let all = mapLayer.selectAll('path');\n        console.log(all.size());\n        all.style('fill', function(d){return fillFn(d);});\n    }\n\n    drawChart() {\n        let width = this.props.width,\n        height = this.props.height,\n        centered;\n\n        secretWeekSelector = this.props.selector;\n        console.log('t:' + this.props.selector)\n\n        // Define color scale\n        let color = d3.scaleThreshold()\n        .domain([1, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 700])\n        .range([\"#efe6b4\",\"#f6d27f\",\"#fdc14a\",\"#fb9d22\",\"#f57e00\",'#ec720f',\"#ea5110\",\"#e22828\",'#bd251d',\"#ab212a\",'#88202a',\"#762334\",\"#4e1824\"]);\n\n        let projection = d3.geoMercator()\n            .scale(200000)\n            // Center the Map in London\n            .center([-0.10629450633040443, 51.5231191276096])\n            .translate([width / 2, height / 2]);\n\n        let path = d3.geoPath()\n        .projection(projection);\n\n        // Set svg width & height\n        let svg = this.svg\n\n        // Add background\n        svg.append('rect')\n        .attr('class', 'background')\n        .attr('width', width)\n        .attr('height', height)\n        .on('click', clicked);\n\n        let g = svg.append('g');\n\n        let effectLayer = g.append('g')\n        .classed('effect-layer', true);\n\n        let mapLayer = g.append('g')\n        .classed('map-layer', true);\n\n        let chartLayer = g.append('g')\n        .classed('chart-layer', true)\n\n        let bigText = g.append('text')\n        .classed('big-text', true)\n        .attr('x', 20)\n        .attr('y', 45);\n\n        let countText = g.append('text')\n        .classed('count-text', true)\n        .attr('x', 23)\n        .attr('y', 70);\n\n        // Load map data\n        d3.json(this.props.data, function(error, mapData) {\n            let features = mapData.features;\n        // Draw each parish as a path\n        mapLayer.selectAll('path')\n            .data(features)\n            .enter().append('path')\n            .attr('d', path)\n            .attr('vector-effect', 'non-scaling-stroke')\n            .style('fill', fillFn)\n            .on('mouseover', mouseover)\n            .on('mouseout', mouseout)\n            .on('click', clicked);\n        });\n\n        // Get parish name\n        function nameFn(d){\n            return d && d.properties ? d.properties.parish : null;\n        }\n\n        // get weekly count\n        function pCount(d){\n            let week = 'week' + secretWeekSelector;\n            console.log('WeekCount:' + week)\n            return d.properties[week];\n        }\n\n        // Get province color\n        function fillFn(d){\n            let c = pCount(d);\n            return color(c);\n        }\n\n        // When clicked, zoom in\n        function clicked(d) {\n        let x, y, k;\n\n        // Compute centroid of the selected path\n        if (d && centered !== d) {\n            let centroid = path.centroid(d);\n            x = centroid[0];\n            y = centroid[1];\n            k = 4;\n            centered = d;\n        } else {\n            x = width / 2;\n            y = height / 2;\n            k = 1;\n            centered = null;\n        }\n\n        // Highlight the clicked parish\n        mapLayer.selectAll('path')\n            .style('fill', function(d){return centered && d===centered ? '#D5708B' : fillFn(d);});\n\n        // Zoom\n        g.transition()\n            .duration(750)\n            .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')scale(' + k + ')translate(' + -x + ',' + -y + ')');\n        }\n\n        // --------------- MOUSE EVENTS ---------------\n\n        function mouseover(d){\n        // Highlight hovered parish\n        d3.select(this).style('fill', 'orange');\n\n        // Draw effects\n        textArt(nameFn(d));\n        disCount(pCount(d));\n        }\n\n        function mouseout(d){\n        // Reset province color\n        mapLayer.selectAll('path')\n            .style('fill', function(d){return centered && d===centered ? '#D5708B' : fillFn(d);});\n\n        // Remove effect text\n        effectLayer.selectAll('text').transition()\n            .style('opacity', 0)\n            .remove();\n\n        // Clear province name\n        bigText.text('');\n        countText.text('')\n        }\n\n        // ---------------- TEXT STYLING -----------------\n\n        let BASE_FONT = \"'Helvetica Neue', Helvetica, Arial, sans-serif\";\n\n        let FONTS = [\n            \"Open Sans\",\n            \"Josefin Slab\",\n            \"Arvo\",\n            \"Lato\",\n            \"Vollkorn\",\n            \"Abril Fatface\",\n            \"Old StandardTT\",\n            \"Droid+Sans\",\n            \"Lobster\",\n            \"Inconsolata\",\n            \"Montserrat\",\n            \"Playfair Display\",\n            \"Karla\",\n            \"Alegreya\",\n            \"Libre Baskerville\",\n            \"Merriweather\",\n            \"Lora\",\n            \"Archivo Narrow\",\n            \"Neuton\",\n            \"Signika\",\n            \"Questrial\",\n            \"Fjalla One\",\n            \"Bitter\",\n            \"letela Round\"\n        ];\n\n        function textArt(text){\n        // Use random font\n        let fontIndex = Math.round(Math.random() * FONTS.length);\n        let fontFamily = FONTS[fontIndex] + ', ' + BASE_FONT;\n\n        bigText\n            .style('font-family', fontFamily)\n            .text(text);\n        }\n\n        function disCount(count){\n        let fontFamily = BASE_FONT;\n        countText\n            .style('font-family', fontFamily)\n            .text(\"# of burials: \" + count);\n\n        }\n        this.svg = svg;\n    }\n\n    render(){\n        return <svg width={this.props.width} height={this.props.height}\n            ref={handle => {this.svg = d3.select(handle)}}></svg>\n    }\n\n}\n\nexport default BurialMap;","/Users/homebase/Desktop/HIST3907/dreadful-visitation-site/src/components/BarChart.js",["42"],"import React from 'react';\nimport * as d3 from 'd3';\nimport { interpolateOranges } from 'd3-scale-chromatic';\n\n\nlet secretWeekSelector = 1;\n\nclass BarChart extends React.Component {\n    componentDidMount() {\n        this.drawChart();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.selector !== this.props.selector) {\n            console.log('b: ' + this.props.selector)\n\n            this.updateChart();\n        }\n    }\n\n    updateChart() {\n        this.svg.selectAll('g').remove();\n\n        secretWeekSelector = this.props.selector;\n        console.log('t:' + this.props.selector)\n\n        var margin = {top: 30, right: 30, bottom: 115, left: 60},\n        width = this.props.width - margin.left - margin.right,\n        height = this.props.height - margin.top - margin.bottom;\n\n        // append the svg object to the body of the page\n        var svg = this.svg\n            .append(\"g\")\n            .attr(\"transform\",\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        var color = d3.scaleOrdinal()\n            .domain(82)\n            .range([\"#F94D50\",\"#f9c74f\",\"#43aa8b\",\"#4d908e\",\"#277da1\"])\n\n\n\n        // Parse the Data\n        d3.csv(this.props.data, function(data) {\n\n        // X axis\n        var x = d3.scaleBand()\n        .range([ 0, width ])\n        .domain(data.map(function(d) { return d.cause; }))\n        .padding(0.2);\n        svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x))\n        .selectAll(\"text\")\n            .attr(\"transform\", \"translate(-12,5)rotate(-75)\")\n            .style(\"text-anchor\", \"end\");\n\n        var max = d3.max(data, function(d) { return +d[secretWeekSelector]; } );\n        // colour.domain([-max, max]);\n\n        // Add Y axis\n        var y = d3.scaleLinear()\n        .domain([0, max + 5])\n        .range([ height, 0]);\n        svg.append(\"g\")\n        .call(d3.axisLeft(y));\n\n        var gridlines = d3.axisLeft()\n            .tickFormat(\"\")\n            .tickSize(-width)\n            .scale(y);\n\n        svg.append(\"g\")\n            .attr(\"class\", \"grid\")\n            .call(gridlines);\n\n        // Bars\n        svg.selectAll(\"mybar\")\n        .data(data)\n        .enter()\n        .append(\"rect\")\n            .attr(\"x\", function(d) { return x(d.cause); })\n            .attr(\"y\", function(d) { return y(d[secretWeekSelector]); })\n            .attr(\"width\", x.bandwidth())\n            .attr(\"height\", function(d) { return height - y(d[secretWeekSelector]); })\n            .attr(\"fill\", function(d) { return color(82); })\n            // .attr(\"fill\", function(d) {\n            // return colour(d['1'])\n            // })\n\n\n        })\n    }\n\n    drawChart() {\n        secretWeekSelector = this.props.selector;\n        console.log('t:' + this.props.selector)\n\n        var margin = {top: 30, right: 30, bottom: 115, left: 60},\n        width = this.props.width - margin.left - margin.right,\n        height = this.props.height - margin.top - margin.bottom;\n\n        // append the svg object to the body of the page\n        var svg = this.svg\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .attr(\"id\", \"bar\")\n        .append(\"g\")\n            .attr(\"transform\",\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        // var colour = d3.scaleSequential(d3.schemeCategory10);\n        \n        var color = d3.scaleOrdinal()\n            .domain(82)\n            .range([\"#F94D50\",\"#f9c74f\",\"#43aa8b\",\"#4d908e\",\"#277da1\"])\n\n\n        // Parse the Data\n        d3.csv(this.props.data, function(data) {\n\n        // X axis\n        var x = d3.scaleBand()\n            .range([ 0, width ])\n            .domain(data.map(function(d) { return d.cause; }))\n            .padding(0.2);\n\n        svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x))\n            .selectAll(\"text\")\n                .attr(\"transform\", \"translate(-12,5)rotate(-75)\")\n                .style(\"text-anchor\", \"end\");\n\n        var max = d3.max(data, function(d) { return +d[secretWeekSelector]; } );\n        // colour.domain([-max, max]);\n\n        // Add Y axis\n        var y = d3.scaleLinear()\n            .domain([0, max + 5])\n            .range([ height, 0])\n\n        svg.append(\"g\")\n            .call(d3.axisLeft(y))\n        \n        var gridlines = d3.axisLeft()\n            .tickFormat(\"\")\n            .tickSize(-width)\n            .scale(y);\n\n        svg.append(\"g\")\n            .attr(\"class\", \"grid\")\n            .call(gridlines);\n\n\n        // Bars\n        svg.selectAll(\"mybar\")\n        .data(data)\n        .enter()\n        .append(\"rect\")\n            .attr(\"x\", function(d) { return x(d.cause); })\n            .attr(\"y\", function(d) { return y(d[secretWeekSelector]); })\n            .attr(\"width\", x.bandwidth())\n            .attr(\"height\", function(d) { return height - y(d[secretWeekSelector]); })\n            .attr(\"fill\", function(d) { return color(82); })\n            // .attr(\"fill\", function(d) {\n            // return colour(d['1'])\n            // })\n\n\n        })\n    }\n\n    render(){\n        return <svg width={this.props.width} height={this.props.height}\n                ref={handle => {this.svg = d3.select(handle)}}></svg>\n    }\n\n}\n\nexport default BarChart;","/Users/homebase/Desktop/HIST3907/dreadful-visitation-site/src/components/fadeinSec.js",["43"],"import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport '../css/fadeSec.css';\n\nfunction FadeInSection(props) {\n    const [isVisible, setVisible] = React.useState(false);\n    const domRef = React.useRef();\n    React.useEffect(() => {\n      const observer = new IntersectionObserver(entries => {\n        entries.forEach(entry => setVisible(entry.isIntersecting));\n      });\n      observer.observe(domRef.current);\n    }, []);\n    return (\n      <div\n        className={`fade-in-section ${isVisible ? 'is-visible' : ''}`}\n        ref={domRef}\n      >\n        {props.children}\n      </div>\n    );\n  }\n\nexport default FadeInSection;\n",{"ruleId":"44","severity":1,"message":"45","line":4,"column":10,"nodeType":"46","messageId":"47","endLine":4,"endColumn":19},{"ruleId":"44","severity":1,"message":"48","line":95,"column":13,"nodeType":"46","messageId":"47","endLine":95,"endColumn":23},{"ruleId":"44","severity":1,"message":"45","line":4,"column":10,"nodeType":"46","messageId":"47","endLine":4,"endColumn":19},{"ruleId":"44","severity":1,"message":"48","line":93,"column":13,"nodeType":"46","messageId":"47","endLine":93,"endColumn":23},{"ruleId":"44","severity":1,"message":"49","line":3,"column":10,"nodeType":"46","messageId":"47","endLine":3,"endColumn":28},{"ruleId":"44","severity":1,"message":"50","line":2,"column":8,"nodeType":"46","messageId":"47","endLine":2,"endColumn":16},"no-unused-vars","'selection' is defined but never used.","Identifier","unusedVar","'chartLayer' is assigned a value but never used.","'interpolateOranges' is defined but never used.","'ReactDOM' is defined but never used."]