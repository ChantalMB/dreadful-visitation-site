{"ast":null,"code":"var _jsxFileName = \"/Users/homebase/Desktop/HIST3907/dreadful-visitation-site/src/components/PlagueMap.js\";\nimport React from 'react';\nimport * as d3 from 'd3';\nimport '../css/maps.css';\nimport { selection } from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet secretWeekSelector = 1;\n\nclass PlagueMap extends React.Component {\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.selector !== this.props.selector) {\n      console.log('b: ' + this.props.selector);\n      this.updateChart();\n    }\n  }\n\n  updateChart() {\n    secretWeekSelector = this.props.selector;\n    console.log('t:' + this.props.selector);\n    let svg = this.svg;\n    let g = svg.select('g');\n    console.log(g.size());\n    let mapLayer = g.select('g.map-layer');\n    console.log(mapLayer.size());\n    let color = d3.scaleThreshold().domain([1, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 700]).range([\"#efe6b4\", \"#f6d27f\", \"#fdc14a\", \"#fb9d22\", \"#f57e00\", '#ec720f', \"#ea5110\", \"#e22828\", '#bd251d', \"#ab212a\", '#88202a', \"#762334\", \"#4e1824\"]); // get weekly count\n\n    function pCount(d) {\n      let week = 'week' + secretWeekSelector;\n      console.log('WeekCount:' + week);\n      return d.properties[week];\n    } // Get province color\n\n\n    function fillFn(d) {\n      let c = pCount(d);\n      return color(c);\n    }\n\n    let all = mapLayer.selectAll('path');\n    console.log(all.size());\n    all.style('fill', function (d) {\n      return fillFn(d);\n    });\n  }\n\n  drawChart() {\n    let width = this.props.width,\n        height = this.props.height,\n        centered;\n    secretWeekSelector = this.props.selector;\n    console.log('t:' + this.props.selector); // Define color scale\n\n    let color = d3.scaleThreshold().domain([1, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 700]).range([\"#efe6b4\", \"#f6d27f\", \"#fdc14a\", \"#fb9d22\", \"#f57e00\", '#ec720f', \"#ea5110\", \"#e22828\", '#bd251d', \"#ab212a\", '#88202a', \"#762334\", \"#4e1824\"]);\n    let projection = d3.geoMercator().scale(200000) // Center the Map in London\n    .center([-0.08629450633040443, 51.5231191276096]).translate([width / 2, height / 2]);\n    let path = d3.geoPath().projection(projection); // Set svg width & height\n\n    let svg = this.svg.attr('width', width).attr('height', height); // Add background\n\n    svg.append('rect').attr('class', 'background').attr('width', width).attr('height', height).on('click', clicked);\n    let g = svg.append('g');\n    let effectLayer = g.append('g').classed('effect-layer', true);\n    let mapLayer = g.append('g').classed('map-layer', true);\n    let chartLayer = g.append('g').classed('chart-layer', true);\n    let bigText = g.append('text').classed('big-text', true).attr('x', 20).attr('y', 45);\n    let countText = g.append('text').classed('count-text', true).attr('x', 23).attr('y', 70); // Load map data\n\n    d3.json(this.props.data, function (error, mapData) {\n      let features = mapData.features; // Draw each parish as a path\n\n      mapLayer.selectAll('path').data(features).enter().append('path').attr('d', path).attr('vector-effect', 'non-scaling-stroke').style('fill', fillFn).on('mouseover', mouseover).on('mouseout', mouseout).on('click', clicked);\n    }); // Get parish name\n\n    function nameFn(d) {\n      return d && d.properties ? d.properties.parish : null;\n    } // get weekly count\n\n\n    function pCount(d) {\n      let week = 'week' + secretWeekSelector;\n      console.log('WeekCount:' + week);\n      return d.properties[week];\n    } // Get province color\n\n\n    function fillFn(d) {\n      let c = pCount(d);\n      return color(c);\n    } // When clicked, zoom in\n\n\n    function clicked(d) {\n      let x, y, k; // Compute centroid of the selected path\n\n      if (d && centered !== d) {\n        let centroid = path.centroid(d);\n        x = centroid[0];\n        y = centroid[1];\n        k = 4;\n        centered = d;\n      } else {\n        x = width / 2;\n        y = height / 2;\n        k = 1;\n        centered = null;\n      } // Highlight the clicked parish\n\n\n      mapLayer.selectAll('path').style('fill', function (d) {\n        return centered && d === centered ? '#D5708B' : fillFn(d);\n      }); // Zoom\n\n      g.transition().duration(750).attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')scale(' + k + ')translate(' + -x + ',' + -y + ')');\n    } // --------------- MOUSE EVENTS ---------------\n\n\n    function mouseover(d) {\n      // Highlight hovered parish\n      d3.select(this).style('fill', 'orange'); // Draw effects\n\n      textArt(nameFn(d));\n      disCount(pCount(d));\n    }\n\n    function mouseout(d) {\n      // Reset province color\n      mapLayer.selectAll('path').style('fill', function (d) {\n        return centered && d === centered ? '#D5708B' : fillFn(d);\n      }); // Remove effect text\n\n      effectLayer.selectAll('text').transition().style('opacity', 0).remove(); // Clear province name\n\n      bigText.text('');\n      countText.text('');\n    } // ---------------- TEXT STYLING -----------------\n\n\n    let BASE_FONT = \"'Helvetica Neue', Helvetica, Arial, sans-serif\";\n    let FONTS = [\"Open Sans\", \"Josefin Slab\", \"Arvo\", \"Lato\", \"Vollkorn\", \"Abril Fatface\", \"Old StandardTT\", \"Droid+Sans\", \"Lobster\", \"Inconsolata\", \"Montserrat\", \"Playfair Display\", \"Karla\", \"Alegreya\", \"Libre Baskerville\", \"Merriweather\", \"Lora\", \"Archivo Narrow\", \"Neuton\", \"Signika\", \"Questrial\", \"Fjalla One\", \"Bitter\", \"letela Round\"];\n\n    function textArt(text) {\n      // Use random font\n      let fontIndex = Math.round(Math.random() * FONTS.length);\n      let fontFamily = FONTS[fontIndex] + ', ' + BASE_FONT;\n      bigText.style('font-family', fontFamily).text(text);\n    }\n\n    function disCount(count) {\n      let fontFamily = BASE_FONT;\n      countText.style('font-family', fontFamily).text(\"# of plague burials: \" + count);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: this.props.width,\n      height: this.props.height,\n      ref: handle => {\n        this.svg = d3.select(handle);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default PlagueMap;","map":{"version":3,"sources":["/Users/homebase/Desktop/HIST3907/dreadful-visitation-site/src/components/PlagueMap.js"],"names":["React","d3","selection","secretWeekSelector","PlagueMap","Component","componentDidMount","drawChart","componentDidUpdate","prevProps","prevState","selector","props","console","log","updateChart","svg","g","select","size","mapLayer","color","scaleThreshold","domain","range","pCount","d","week","properties","fillFn","c","all","selectAll","style","width","height","centered","projection","geoMercator","scale","center","translate","path","geoPath","attr","append","on","clicked","effectLayer","classed","chartLayer","bigText","countText","json","data","error","mapData","features","enter","mouseover","mouseout","nameFn","parish","x","y","k","centroid","transition","duration","textArt","disCount","remove","text","BASE_FONT","FONTS","fontIndex","Math","round","random","length","fontFamily","count","render","handle"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as d3 from 'd3';\nimport '../css/maps.css'\nimport { selection } from 'd3';\n\nlet secretWeekSelector = 1;\n\nclass PlagueMap extends React.Component {\n    componentDidMount() {\n        this.drawChart();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.selector !== this.props.selector) {\n            console.log('b: ' + this.props.selector)\n\n            this.updateChart();\n        }\n    }\n\n    updateChart() {\n        secretWeekSelector = this.props.selector;\n        console.log('t:' + this.props.selector)\n\n        let svg = this.svg;\n        let g = svg.select('g');\n        console.log(g.size());\n        let mapLayer = g.select('g.map-layer');\n        console.log(mapLayer.size());\n\n        let color = d3.scaleThreshold()\n        .domain([1, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 700])\n        .range([\"#efe6b4\",\"#f6d27f\",\"#fdc14a\",\"#fb9d22\",\"#f57e00\",'#ec720f',\"#ea5110\",\"#e22828\",'#bd251d',\"#ab212a\",'#88202a',\"#762334\",\"#4e1824\"]);\n\n        // get weekly count\n        function pCount(d){\n            let week = 'week' + secretWeekSelector;\n            console.log('WeekCount:' + week)\n            return d.properties[week];\n        }\n\n        // Get province color\n        function fillFn(d){\n            let c = pCount(d);\n            return color(c);\n        }\n\n        let all = mapLayer.selectAll('path');\n        console.log(all.size());\n        all.style('fill', function(d){return fillFn(d);});\n    }\n\n    drawChart() {\n        let width = this.props.width,\n        height = this.props.height,\n        centered;\n\n        secretWeekSelector = this.props.selector;\n        console.log('t:' + this.props.selector)\n\n        // Define color scale\n        let color = d3.scaleThreshold()\n        .domain([1, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 700])\n        .range([\"#efe6b4\",\"#f6d27f\",\"#fdc14a\",\"#fb9d22\",\"#f57e00\",'#ec720f',\"#ea5110\",\"#e22828\",'#bd251d',\"#ab212a\",'#88202a',\"#762334\",\"#4e1824\"]);\n\n        let projection = d3.geoMercator()\n            .scale(200000)\n            // Center the Map in London\n            .center([-0.08629450633040443, 51.5231191276096])\n            .translate([width / 2, height / 2]);\n\n        let path = d3.geoPath()\n            .projection(projection);\n\n        // Set svg width & height\n        let svg = this.svg\n            .attr('width', width)\n            .attr('height', height);\n\n        // Add background\n        svg.append('rect')\n        .attr('class', 'background')\n        .attr('width', width)\n        .attr('height', height)\n        .on('click', clicked);\n\n        let g = svg.append('g');\n\n        let effectLayer = g.append('g')\n        .classed('effect-layer', true);\n\n        let mapLayer = g.append('g')\n        .classed('map-layer', true);\n\n        let chartLayer = g.append('g')\n            .classed('chart-layer', true)\n\n        let bigText = g.append('text')\n        .classed('big-text', true)\n        .attr('x', 20)\n        .attr('y', 45);\n\n        let countText = g.append('text')\n        .classed('count-text', true)\n        .attr('x', 23)\n        .attr('y', 70);\n\n        // Load map data\n        d3.json(this.props.data, function(error, mapData) {\n            let features = mapData.features;\n        // Draw each parish as a path\n            mapLayer.selectAll('path')\n                .data(features)\n                .enter().append('path')\n                .attr('d', path)\n                .attr('vector-effect', 'non-scaling-stroke')\n                .style('fill', fillFn)\n                .on('mouseover', mouseover)\n                .on('mouseout', mouseout)\n                .on('click', clicked);\n            });\n\n        // Get parish name\n        function nameFn(d){\n            return d && d.properties ? d.properties.parish : null;\n        }\n\n        // get weekly count\n        function pCount(d){\n            let week = 'week' + secretWeekSelector;\n            console.log('WeekCount:' + week)\n            return d.properties[week];\n        }\n\n        // Get province color\n        function fillFn(d){\n            let c = pCount(d);\n            return color(c);\n        }\n\n        // When clicked, zoom in\n        function clicked(d) {\n        let x, y, k;\n\n        // Compute centroid of the selected path\n        if (d && centered !== d) {\n            let centroid = path.centroid(d);\n            x = centroid[0];\n            y = centroid[1];\n            k = 4;\n            centered = d;\n        } else {\n            x = width / 2;\n            y = height / 2;\n            k = 1;\n            centered = null;\n        }\n\n        // Highlight the clicked parish\n        mapLayer.selectAll('path')\n            .style('fill', function(d){return centered && d===centered ? '#D5708B' : fillFn(d);});\n\n        // Zoom\n        g.transition()\n            .duration(750)\n            .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')scale(' + k + ')translate(' + -x + ',' + -y + ')');\n        }\n\n        // --------------- MOUSE EVENTS ---------------\n\n        function mouseover(d){\n        // Highlight hovered parish\n        d3.select(this).style('fill', 'orange');\n\n        // Draw effects\n        textArt(nameFn(d));\n        disCount(pCount(d));\n        }\n\n        function mouseout(d){\n        // Reset province color\n        mapLayer.selectAll('path')\n            .style('fill', function(d){return centered && d===centered ? '#D5708B' : fillFn(d);});\n\n        // Remove effect text\n        effectLayer.selectAll('text').transition()\n            .style('opacity', 0)\n            .remove();\n\n        // Clear province name\n        bigText.text('');\n        countText.text('')\n        }\n\n        // ---------------- TEXT STYLING -----------------\n\n        let BASE_FONT = \"'Helvetica Neue', Helvetica, Arial, sans-serif\";\n\n        let FONTS = [\n            \"Open Sans\",\n            \"Josefin Slab\",\n            \"Arvo\",\n            \"Lato\",\n            \"Vollkorn\",\n            \"Abril Fatface\",\n            \"Old StandardTT\",\n            \"Droid+Sans\",\n            \"Lobster\",\n            \"Inconsolata\",\n            \"Montserrat\",\n            \"Playfair Display\",\n            \"Karla\",\n            \"Alegreya\",\n            \"Libre Baskerville\",\n            \"Merriweather\",\n            \"Lora\",\n            \"Archivo Narrow\",\n            \"Neuton\",\n            \"Signika\",\n            \"Questrial\",\n            \"Fjalla One\",\n            \"Bitter\",\n            \"letela Round\"\n        ];\n\n        function textArt(text){\n        // Use random font\n        let fontIndex = Math.round(Math.random() * FONTS.length);\n        let fontFamily = FONTS[fontIndex] + ', ' + BASE_FONT;\n\n        bigText\n            .style('font-family', fontFamily)\n            .text(text);\n        }\n\n        function disCount(count){\n        let fontFamily = BASE_FONT;\n        countText\n            .style('font-family', fontFamily)\n            .text(\"# of plague burials: \" + count);\n\n        }\n    }\n\n    render(){\n        return <svg width={this.props.width} height={this.props.height}\n            ref={handle => {this.svg = d3.select(handle)}}></svg>\n    }\n\n}\n\nexport default PlagueMap;"]},"metadata":{},"sourceType":"module"}